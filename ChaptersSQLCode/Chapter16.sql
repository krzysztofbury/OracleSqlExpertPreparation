/* Example */
SELECT LEVEL, EMPLOYEE_ID, TITLE
  FROM EMPLOYEE_CHART
START WITH EMPLOYEE_ID = 1
CONNECT BY REPORTS_TO = PRIOR EMPLOYEE_ID;

-- PRIOR is placed before the EMPLOYEE_ID reference
-- This indicates that for each row in the EMPLOYEE_CHART table, SQL will go find
-- the next row in the hierarchy by locating a row with a REPORTS_TO value that is equal to the PRIOR row's EMPLOYEE_ID value

/* Hierarchical Query - Removing Entire Branch */
SELECT LEVEL, EMPLOYEE_ID, LPAD(' ', LEVEL*2)||TITLE AS TITLE
  FROM EMPLOYEE_CHART
 START WITH EMPLOYEE_ID = 1
 CONNECT BY REPORTS_TO = PRIOR EMPLOYEE_ID
     AND EMPLOYEE_ID <> 3;

/* Hierarchical Query - WHERE */
SELECT LEVEL, EMPLOYEE_ID, LPAD(' ', LEVEL*2)||TITLE AS TITLE
  FROM EMPLOYEE_CHART
 WHERE EMPLOYEE_ID NOT IN (SELECT ID FROM FORMER_EMPLOYEES)
 START WITH EMPLOYEE_ID = 1
 CONNECT BY REPORTS_TO = PRIOR EMPLOYEE_ID
     AND TITLE <> 'SVP';

/* ORDER SIBLINGS BY EXAMPLE */
SELECT LEVEL, EMPLOYEE_ID, LPAD(' ', LEVEL*2)||TITLE AS TITLE_FORMATTED
  FROM EMPLOYEE_CHART
 START WITH EMPLOYEE_ID = 1
 CONNECT BY REPORS_TO = PRIOR EMPLOYEE_ID
 ORDER SIBLINGS BY TITLE;
 
/* SYS_CONNECT_BY_PATH */
SELECT LEVEL, EMPLOYEEE_ID, SYS_CONNECT_BY_PATH(TITLE,'/') AS TITLE
  FROM EMPLOYEE_CHART
 START WITH EMPLOYEE_ID = 1
 CONNECT BY REPORTS_TO = PRIOR EMPLOYEE_ID;
 
/* CONNECT_BY_ROOT */
SELECT LEVEL, EMPLOYEE_ID, TITLE, CONNECT_BY_ROOT TITLE AS ANCESTOR
  FROM EMPLOYEE_CHART
 START WITH EMPLOYEE_ID = 3
 CONNECT BY REPORTS_TO = PRIOR EMPLOYEE_ID;